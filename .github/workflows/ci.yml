on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build-extension:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
    - run: |
        cd client
        yarn run package

  nix-dev-build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'
    - name: Configure Dune
      run: |
        mkdir -p ~/.config/dune
        cat <<EOF > ~/.config/dune/config
        (lang dune 3.2)
        (display short)
        EOF
    - uses: cachix/install-nix-action@v18
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - run: nix build '.?submodules=1'
    - run: nix develop .#vscoq-language-server -c bash -c "cd language-server && make world"
    - run: nix develop .#vscoq-client -c bash -c "cd client && yarn run install:all && yarn run build:all && yarn run compile"
    - run: xvfb-run nix develop .#vscoq-client -c bash -c "cd client && yarn test"
      if: runner.os == 'Linux'
    - run: nix develop .#vscoq-client -c bash -c "cd client && yarn test"
      if: runner.os != 'Linux'

  install-opam:
    strategy:
      matrix:
        os: [ubuntu-latest]
        ocaml-compiler: [4.14.x]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Use OCaml ${{ matrix.ocaml-compiler }}
      uses: avsm/setup-ocaml@v2
      with:
        ocaml-compiler: ${{ matrix.ocaml-compiler }}

    - name: Install Coq
      env:
        OPAMYES: true
      run: |
        opam pin add coq-core.8.17.0+vscoq ./language-server/coq
        opam pin add coq-stdlib.8.17.0+vscoq ./language-server/coq
      
    - name: Install vscoq-language-server
      env:
        OPAMYES: true
      run: |
        opam pin add vscoq-language-server ./language-server/ --with-doc --with-test -y

    - run: |
        eval $(opam env)
        which vscoqtop
        vscoqtop -v

  dev-setup-opam:
    strategy:
      matrix:
        os: [ubuntu-latest]
        ocaml-compiler: [4.14.x]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Use OCaml ${{ matrix.ocaml-compiler }}
      uses: avsm/setup-ocaml@v2
      with:
        ocaml-compiler: ${{ matrix.ocaml-compiler }}

    - name: Install deps
      env:
        OPAMYES: true
      run: |
        opam install ./language-server/coq/coq-core.opam          --deps-only
        opam install ./language-server/vscoq-language-server.opam --deps-only --with-doc --with-test
      
    - name: Build vscoq-language-server
      run: |
        eval $(opam env)
        cd language-server && make

    - run: |
        eval $(opam env)
        cd language-server && dune exec vscoqtop -- -v
